/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forme;

import domen.Igrac;
import domen.Klub;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JOptionPane;
import konstante.Operacije;
import transfer.KlijentskiZahtev;
import transfer.ServerskiOdgovor;

/**
 *
 * @author Windows HD
 */
public class formaIgraci extends javax.swing.JPanel {

    /**
     * Creates new form formaIgraci
     */
    ArrayList<Klub> sortirana = new ArrayList<>();
    ArrayList<Klub> klubovi1 = new ArrayList<>();

    public formaIgraci() {
        initComponents();
        ucitajKomboKlubove();
        srediKomboDresovi();
        srediKomboPozicije();
        sortirajKlubove();
        //sredi();
        napuniKlubove1();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        comboKlub = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        txtIme = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtPrezime = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        comboPozicija = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        comboBrojDresa = new javax.swing.JComboBox();
        btnSacuvaj = new javax.swing.JButton();

        jLabel1.setText("Klub:");

        comboKlub.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("Ime:");

        jLabel3.setText("Prezime:");

        jLabel4.setText("Pozicija:");

        comboPozicija.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel5.setText("Broj dresa:");

        comboBrojDresa.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnSacuvaj.setText("Sačuvaj");
        btnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboKlub, 0, 241, Short.MAX_VALUE)
                            .addComponent(txtIme)
                            .addComponent(txtPrezime)
                            .addComponent(comboPozicija, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comboBrojDresa, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSacuvaj, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboKlub, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(txtIme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtPrezime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(comboPozicija, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(comboBrojDresa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addComponent(btnSacuvaj)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajActionPerformed

        if (txtIme.getText().isEmpty() || txtPrezime.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Sva polja moraju biti popunjena", "", JOptionPane.ERROR_MESSAGE);
            return;
        }

        KlijentskiZahtev kz1 = new KlijentskiZahtev();
        kz1.setOperacija(Operacije.VRATI_IGRACE);
        komunikacija.KomunikacijaSaServerom.getInstanca().posaljiZahtev(kz1);

        ServerskiOdgovor so1 = komunikacija.KomunikacijaSaServerom.getInstanca().primiOdgovor();
        ArrayList<Igrac> vraceni = (ArrayList<Igrac>) so1.getOdgovor();

        Igrac igr1 = new Igrac();
        igr1.setBrDresa((String) comboBrojDresa.getSelectedItem());
        igr1.setIme(txtIme.getText());
        igr1.setPrezime(txtPrezime.getText());
        igr1.setPozicija((String) comboPozicija.getSelectedItem());
        igr1.setKlub((Klub) comboKlub.getSelectedItem());

        for (Igrac ig1 : vraceni) {
            if (ig1.getKlub().getKlubID() == igr1.getKlub().getKlubID()
                    && ig1.getBrDresa().equals(igr1.getBrDresa())) {
                JOptionPane.showMessageDialog(this, "Već postoji igrač sa ovim brojem dresa u ovom klubu", "", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        for (Klub kl : klubovi1) {
            int brojac = 0;
            int brojGolmana = 0, brLeviBek = 0, brStoper = 0, brDesniBek = 0, brZadnjiVezni = 0, brCentVezni = 0, brLevoKrilo = 0, brDesnoKrilo = 0, brNapadac = 0;

            Igrac igr = new Igrac();
            igr.setBrDresa((String) comboBrojDresa.getSelectedItem());
            igr.setIme(txtIme.getText());
            igr.setPrezime(txtPrezime.getText());
            igr.setPozicija((String) comboPozicija.getSelectedItem());
            igr.setKlub((Klub) comboKlub.getSelectedItem());

            for (Igrac ig : vraceni) {
                if (ig.getKlub().getKlubID() == kl.getKlubID()) {
                    ++brojac;
                    if (ig.getPozicija().equals("Golman")) {
                        brojGolmana++;
                    } else if (ig.getPozicija().equals("Štoper")) {
                        brStoper++;
                    } else if (ig.getPozicija().equals("Desni bek")) {
                        brDesniBek++;
                    } else if (ig.getPozicija().equals("Zadnji vezni")) {
                        brZadnjiVezni++;
                    } else if (ig.getPozicija().equals("Centralni vezni")) {
                        brCentVezni++;
                    } else if (ig.getPozicija().equals("Levo krilo")) {
                        brLevoKrilo++;
                    } else if (ig.getPozicija().equals("Desno krilo")) {
                        brDesnoKrilo++;
                    } else if (ig.getPozicija().equals("Napadac")) {
                        brNapadac++;
                    }
                }

                if (brojGolmana == 2 && igr.getPozicija().equals("Golman") && igr.getKlub().getKlubID() == kl.getKlubID()) {
                    JOptionPane.showMessageDialog(this, kl.getNaziv() + " već ima 2 golmana", "", JOptionPane.ERROR_MESSAGE);
                    return;
                } else if (brStoper == 4 && igr.getPozicija().equals("Štoper") && igr.getKlub().getKlubID() == kl.getKlubID()) {
                    JOptionPane.showMessageDialog(this, kl.getNaziv() + " već ima 4 štopera", "", JOptionPane.ERROR_MESSAGE);
                    return;
                } else if (brDesniBek == 2 && igr.getPozicija().equals("Levi bek") && igr.getKlub().getKlubID() == kl.getKlubID()) {
                    JOptionPane.showMessageDialog(this, kl.getNaziv() + " već ima 2 desna beka", "", JOptionPane.ERROR_MESSAGE);
                    return;
                } else if (brLeviBek == 2 && igr.getPozicija().equals("Desni bek") && igr.getKlub().getKlubID() == kl.getKlubID()) {
                    JOptionPane.showMessageDialog(this, kl.getNaziv() + " već ima 2 leva beka", "", JOptionPane.ERROR_MESSAGE);
                    return;
                } else if (brZadnjiVezni == 2 && igr.getPozicija().equals("Zadnji vezni") && igr.getKlub().getKlubID() == kl.getKlubID()) {
                    JOptionPane.showMessageDialog(this, kl.getNaziv() + " već ima 2 zadnja vezna", "", JOptionPane.ERROR_MESSAGE);
                    return;
                } else if (brCentVezni == 2 && igr.getPozicija().equals("Centralni vezni") && igr.getKlub().getKlubID() == kl.getKlubID()) {
                    JOptionPane.showMessageDialog(this, kl.getNaziv() + " već ima 2 centralna vezna", "", JOptionPane.ERROR_MESSAGE);
                    return;
                } else if (brLevoKrilo == 2 && igr.getPozicija().equals("Levo krilo") && igr.getKlub().getKlubID() == kl.getKlubID()) {
                    JOptionPane.showMessageDialog(this, kl.getNaziv() + " već ima 2 leva krila", "", JOptionPane.ERROR_MESSAGE);
                    return;
                } else if (brDesnoKrilo == 2 && igr.getPozicija().equals("Desno krilo") && igr.getKlub().getKlubID() == kl.getKlubID()) {
                    JOptionPane.showMessageDialog(this, kl.getNaziv() + " već ima 2 desna krila", "", JOptionPane.ERROR_MESSAGE);
                    return;
                } else if (brNapadac == 2 && igr.getPozicija().equals("Napadac") && igr.getKlub().getKlubID() == kl.getKlubID()) {
                    JOptionPane.showMessageDialog(this, kl.getNaziv() + " već ima 2 napadača", "", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            if (brojac >= 25) {
                JOptionPane.showMessageDialog(this, kl.getNaziv() + " ne sme da ima više od 25 igrača.", "", JOptionPane.ERROR_MESSAGE);
                klubovi1.remove(kl);
                comboKlub.removeItem(kl);
                return;
            }
        }

        String ime = txtIme.getText();
        String prezime = txtPrezime.getText();
        String brDresa = (String) comboBrojDresa.getSelectedItem();

        //comboBrojDresa.removeItem(brDresa);
        String pozicija = (String) comboPozicija.getSelectedItem();

        Klub klub = (Klub) comboKlub.getSelectedItem();

        Igrac igrac = new Igrac(-1, brDresa, ime, prezime, pozicija, klub);

        KlijentskiZahtev kz = new KlijentskiZahtev();
        kz.setOperacija(Operacije.SACUVAJ_IGRACE);
        kz.setParametar(igrac);
        komunikacija.KomunikacijaSaServerom.getInstanca().posaljiZahtev(kz);

        ServerskiOdgovor so = komunikacija.KomunikacijaSaServerom.getInstanca().primiOdgovor();
        //comboBrojDresa.removeItem(brDresa);
        JOptionPane.showMessageDialog(this, so.getTekst());
    }//GEN-LAST:event_btnSacuvajActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSacuvaj;
    private javax.swing.JComboBox comboBrojDresa;
    private javax.swing.JComboBox comboKlub;
    private javax.swing.JComboBox comboPozicija;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField txtIme;
    private javax.swing.JTextField txtPrezime;
    // End of variables declaration//GEN-END:variables

    private void ucitajKomboKlubove() {
        KlijentskiZahtev kz = new KlijentskiZahtev();
        kz.setOperacija(Operacije.VRATI_KLUBOVE);
        komunikacija.KomunikacijaSaServerom.getInstanca().posaljiZahtev(kz);

        ServerskiOdgovor so = komunikacija.KomunikacijaSaServerom.getInstanca().primiOdgovor();
        ArrayList<Klub> klubovi = (ArrayList<Klub>) so.getOdgovor();
        sortirana = klubovi;
        comboKlub.removeAllItems();

        for (Klub k : klubovi) {
            comboKlub.addItem(k);
        }
    }

    private void srediKomboDresovi() {
        comboBrojDresa.removeAllItems();
        for (int i = 1; i <= 100; i++) {
            comboBrojDresa.addItem("" + i);
        }
    }

    private void srediKomboPozicije() {
        comboPozicija.removeAllItems();
        comboPozicija.addItem("Golman");
        comboPozicija.addItem("Levi bek");
        comboPozicija.addItem("Štoper");
        comboPozicija.addItem("Desni bek");
        comboPozicija.addItem("Zadnji vezni");
        comboPozicija.addItem("Centralni vezni");
        comboPozicija.addItem("Centralni napadac");
        comboPozicija.addItem("Levo krilo");
        comboPozicija.addItem("Desno krilo");
        comboPozicija.addItem("Napadac");
    }

    private void sortirajKlubove() {
        Collections.sort(sortirana);
        comboKlub.removeAllItems();

        for (Klub k : sortirana) {
            comboKlub.addItem(k);
        }
    }

    private void sredi() {
        KlijentskiZahtev kz2 = new KlijentskiZahtev();
        kz2.setOperacija(Operacije.VRATI_IGRACE);
        komunikacija.KomunikacijaSaServerom.getInstanca().posaljiZahtev(kz2);

        ServerskiOdgovor so2 = komunikacija.KomunikacijaSaServerom.getInstanca().primiOdgovor();
        ArrayList<Igrac> vraceniIgraci = (ArrayList<Igrac>) so2.getOdgovor();

        for (Igrac ig : vraceniIgraci) {
            comboBrojDresa.removeItem(ig.getBrDresa());
        }
    }

    private void napuniKlubove1() {
        KlijentskiZahtev kz3 = new KlijentskiZahtev();
        kz3.setOperacija(Operacije.VRATI_KLUBOVE);
        komunikacija.KomunikacijaSaServerom.getInstanca().posaljiZahtev(kz3);

        ServerskiOdgovor so3 = komunikacija.KomunikacijaSaServerom.getInstanca().primiOdgovor();
        klubovi1 = (ArrayList<Klub>) so3.getOdgovor();
    }
}
