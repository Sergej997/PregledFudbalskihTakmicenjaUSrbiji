/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forme;

import domen.Klub;
import domen.Rezultat;
import domen.Takmicenje;
import domen.Utakmica;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import konstante.Operacije;
import modeli.ModelTabeleObrisiTakmicenje;
import transfer.KlijentskiZahtev;
import transfer.ServerskiOdgovor;

/**
 *
 * @author Windows HD
 */
public class formaUtakmice extends javax.swing.JPanel {

    /**
     * Creates new form formaUtakmice
     */
    ArrayList<Klub> sortirani = new ArrayList<>();

    public formaUtakmice() {
        initComponents();
        srediDomacine();
        srediGoste();
        srediTabelu();
        sortiraj();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtDatum = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaTakmicenja = new javax.swing.JTable();
        btnOdustani = new javax.swing.JButton();
        txtPretraga = new javax.swing.JTextField();
        btnPretraga = new javax.swing.JButton();
        btnPrikaziSve = new javax.swing.JButton();
        comboDomacin = new javax.swing.JComboBox();
        comboGost = new javax.swing.JComboBox();
        btnSacuvaj = new javax.swing.JButton();
        btnObrisiUtakmicu = new javax.swing.JButton();

        jLabel1.setText("Datum utakmice:");

        jLabel2.setText("Domaćin:");

        jLabel3.setText("Gost:");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Takmičenje", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        tabelaTakmicenja.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabelaTakmicenja);

        btnOdustani.setText("Odustani");
        btnOdustani.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOdustaniActionPerformed(evt);
            }
        });

        btnPretraga.setText("Pretraga");
        btnPretraga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPretragaActionPerformed(evt);
            }
        });

        btnPrikaziSve.setText("Prikaži sve");
        btnPrikaziSve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrikaziSveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(btnPrikaziSve, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnOdustani, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(txtPretraga, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnPretraga, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPretraga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPretraga))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOdustani)
                    .addComponent(btnPrikaziSve))
                .addContainerGap())
        );

        comboDomacin.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        comboGost.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnSacuvaj.setText("Sačuvaj");
        btnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajActionPerformed(evt);
            }
        });

        btnObrisiUtakmicu.setText("Obriši");
        btnObrisiUtakmicu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiUtakmicuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDatum)
                            .addComponent(comboDomacin, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comboGost, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(btnSacuvaj, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnObrisiUtakmicu, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(comboDomacin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(comboGost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSacuvaj)
                    .addComponent(btnObrisiUtakmicu))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnPretragaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPretragaActionPerformed
        ModelTabeleObrisiTakmicenje model = (ModelTabeleObrisiTakmicenje) tabelaTakmicenja.getModel();
        String filter = txtPretraga.getText();

        ArrayList<Takmicenje> lista = model.getLista();
        ArrayList<Takmicenje> filtrirani = new ArrayList<>();

        for (Takmicenje tak : lista) {
            if (tak.getNaziv().toLowerCase().contains(filter.toLowerCase())) {
                filtrirani.add(tak);
            }
        }

        model.obrisiListu();

        for (Takmicenje filtrirani1 : filtrirani) {
            model.dodajUListu(filtrirani1);
        }

        tabelaTakmicenja.setModel(model);
    }//GEN-LAST:event_btnPretragaActionPerformed

    private void btnPrikaziSveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrikaziSveActionPerformed
        ModelTabeleObrisiTakmicenje model = new ModelTabeleObrisiTakmicenje();
        KlijentskiZahtev kz = new KlijentskiZahtev();
        kz.setOperacija(Operacije.VRATI_TAKMICENJA);
        komunikacija.KomunikacijaSaServerom.getInstanca().posaljiZahtev(kz);

        ServerskiOdgovor so = komunikacija.KomunikacijaSaServerom.getInstanca().primiOdgovor();
        ArrayList<Takmicenje> takmicenja = (ArrayList<Takmicenje>) so.getOdgovor();

        for (Takmicenje t : takmicenja) {
            model.dodajUListu(t);
        }
        tabelaTakmicenja.setModel(model);
        txtPretraga.setText("");
    }//GEN-LAST:event_btnPrikaziSveActionPerformed

    private void btnOdustaniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOdustaniActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Cofirm if you want to exit", "",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_NO_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_btnOdustaniActionPerformed

    private void btnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajActionPerformed
        SimpleDateFormat format = new SimpleDateFormat("dd.MM.yyyy");
        String datum = txtDatum.getText();
        Date dat = new Date();

        if (txtDatum.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Morate uneti datum.", "", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            dat = format.parse(datum);
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Datum mora biti u formatu 'dd.MM.yyyy'", "", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int red = tabelaTakmicenja.getSelectedRow();

        if (red >= 0) {
            ModelTabeleObrisiTakmicenje model = (ModelTabeleObrisiTakmicenje) tabelaTakmicenja.getModel();
            Takmicenje tak = model.vratiElement(red);
            if (dat.after(tak.getDatumZavrsetka()) || dat.before(tak.getDatumPocetka())) {
                JOptionPane.showMessageDialog(this, "Datum mora biti u razdoblju izmedju " + tak.getDatumPocetka() + "-" + tak.getDatumZavrsetka(), "", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        Klub gost = (Klub) comboGost.getSelectedItem();
        Klub domacin = (Klub) comboDomacin.getSelectedItem();

        if (gost.getNaziv().equals(domacin.getNaziv())) {
            JOptionPane.showMessageDialog(this, "Klub domaćin i klub gost moraju biti različiti", "", JOptionPane.ERROR_MESSAGE);
            return;
        }

        ModelTabeleObrisiTakmicenje model = (ModelTabeleObrisiTakmicenje) tabelaTakmicenja.getModel();
        int red1 = tabelaTakmicenja.getSelectedRow();
        Takmicenje takmicenje = null;

        if (red1 >= 0) {
            takmicenje = model.vratiElement(red1);
        } else {
            JOptionPane.showMessageDialog(this, "Morate izabrati takmičenje na kom se igra utakmica", "", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Utakmica u = new Utakmica(-1, dat, null, domacin.getNaziv(), gost.getNaziv(), takmicenje);

        KlijentskiZahtev kz = new KlijentskiZahtev();
        kz.setOperacija(Operacije.VRATI_UTAKMICE);
        komunikacija.KomunikacijaSaServerom.getInstanca().posaljiZahtev(kz);

        ServerskiOdgovor so = komunikacija.KomunikacijaSaServerom.getInstanca().primiOdgovor();
        ArrayList<Utakmica> vraceneUtakmice = (ArrayList<Utakmica>) so.getOdgovor();

        int brojac = 0;

        if (vraceneUtakmice.size() != 0) {
            for (Utakmica vracena : vraceneUtakmice) {
                if (u.getDomacin().equals(vracena.getDomacin()) && u.getGost().equals(vracena.getGost())
                        && u.getTakmicenje().getTakmicenjeID() == vracena.getTakmicenje().getTakmicenjeID()) {
                    brojac++;
                }
            }
        }

        KlijentskiZahtev kz2 = new KlijentskiZahtev();
        kz2.setOperacija(Operacije.VRATI_UTAKMICE);
        komunikacija.KomunikacijaSaServerom.getInstanca().posaljiZahtev(kz2);

        ServerskiOdgovor so2 = komunikacija.KomunikacijaSaServerom.getInstanca().primiOdgovor();
        ArrayList<Utakmica> ute = (ArrayList<Utakmica>) so2.getOdgovor();

        for (Utakmica ute1 : ute) {
            Date datumm = new Date();
            try {
                datumm = format.parse(format.format(ute1.getDatumIgranja()));
            } catch (ParseException ex) {
                Logger.getLogger(formaUtakmice.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (datumm.equals(dat)) {
                Klub klubDomacin = (Klub) comboDomacin.getSelectedItem();
                Klub klubGost = (Klub) comboGost.getSelectedItem();
                if (ute1.getDomacin().equals(klubGost.getNaziv())) {
                    JOptionPane.showMessageDialog(this, ute1.getDomacin() + " ne može da igra više puta u jednom danu.", "", JOptionPane.ERROR_MESSAGE);
                    return;
                } else if (ute1.getDomacin().equals(klubDomacin.getNaziv())) {
                    JOptionPane.showMessageDialog(this, ute1.getDomacin() + " ne može da igra više puta u jednom danu.", "", JOptionPane.ERROR_MESSAGE);
                    return;
                } else if (ute1.getGost().equals(klubGost.getNaziv())) {
                    JOptionPane.showMessageDialog(this, ute1.getGost() + " ne može da igra više puta u jednom danu.", "", JOptionPane.ERROR_MESSAGE);
                    return;
                } else if (ute1.getGost().equals(klubDomacin.getNaziv())) {
                    JOptionPane.showMessageDialog(this, ute1.getGost() + " ne može da igra više puta u jednom danu.", "", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

        }

        if (vraceneUtakmice.size() == 0 || brojac == 0) {
            KlijentskiZahtev kz1 = new KlijentskiZahtev();
            kz1.setOperacija(Operacije.SACUVAJ_UTAKMICE);
            kz1.setParametar(u);
            komunikacija.KomunikacijaSaServerom.getInstanca().posaljiZahtev(kz1);

            ServerskiOdgovor so1 = komunikacija.KomunikacijaSaServerom.getInstanca().primiOdgovor();
            JOptionPane.showMessageDialog(this, so1.getTekst());
        } else {
            JOptionPane.showMessageDialog(this, "Utakmica već postoji.", "", JOptionPane.ERROR_MESSAGE);
            return;
        }

    }//GEN-LAST:event_btnSacuvajActionPerformed

    private void btnObrisiUtakmicuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiUtakmicuActionPerformed
        formaObrisiUtakmice forma = new formaObrisiUtakmice(null, false);
        forma.setVisible(true);
        forma.setLocationRelativeTo(this);
    }//GEN-LAST:event_btnObrisiUtakmicuActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnObrisiUtakmicu;
    private javax.swing.JButton btnOdustani;
    private javax.swing.JButton btnPretraga;
    private javax.swing.JButton btnPrikaziSve;
    private javax.swing.JButton btnSacuvaj;
    private javax.swing.JComboBox comboDomacin;
    private javax.swing.JComboBox comboGost;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabelaTakmicenja;
    private javax.swing.JTextField txtDatum;
    private javax.swing.JTextField txtPretraga;
    // End of variables declaration//GEN-END:variables

    private void srediDomacine() {
        KlijentskiZahtev kz = new KlijentskiZahtev();
        kz.setOperacija(Operacije.VRATI_KLUBOVE);
        komunikacija.KomunikacijaSaServerom.getInstanca().posaljiZahtev(kz);

        ServerskiOdgovor so = komunikacija.KomunikacijaSaServerom.getInstanca().primiOdgovor();
        ArrayList<Klub> vraceniKlubovi = (ArrayList<Klub>) so.getOdgovor();

        comboDomacin.removeAllItems();

        for (Klub vraceniKlubovi1 : vraceniKlubovi) {
            comboDomacin.addItem(vraceniKlubovi1);
        }
    }

    private void srediGoste() {
        KlijentskiZahtev kz = new KlijentskiZahtev();
        kz.setOperacija(Operacije.VRATI_KLUBOVE);
        komunikacija.KomunikacijaSaServerom.getInstanca().posaljiZahtev(kz);

        ServerskiOdgovor so = komunikacija.KomunikacijaSaServerom.getInstanca().primiOdgovor();
        ArrayList<Klub> vraceniKlubovi = (ArrayList<Klub>) so.getOdgovor();
        sortirani = vraceniKlubovi;
        Collections.sort(sortirani);

        comboGost.removeAllItems();

        for (Klub vraceniKlubovi1 : vraceniKlubovi) {
            comboGost.addItem(vraceniKlubovi1);
        }
    }

    private void srediTabelu() {
        ModelTabeleObrisiTakmicenje model = new ModelTabeleObrisiTakmicenje();
        KlijentskiZahtev kz = new KlijentskiZahtev();
        kz.setOperacija(Operacije.VRATI_TAKMICENJA);
        komunikacija.KomunikacijaSaServerom.getInstanca().posaljiZahtev(kz);

        ServerskiOdgovor so = komunikacija.KomunikacijaSaServerom.getInstanca().primiOdgovor();
        ArrayList<Takmicenje> takmicenja = (ArrayList<Takmicenje>) so.getOdgovor();

        for (Takmicenje tak : takmicenja) {
            model.dodajUListu(tak);
        }
        tabelaTakmicenja.setModel(model);
    }

    private void sortiraj() {
        comboGost.removeAllItems();
        comboDomacin.removeAllItems();

        for (Klub k : sortirani) {
            comboGost.addItem(k);
            comboDomacin.addItem(k);
        }
    }
}
