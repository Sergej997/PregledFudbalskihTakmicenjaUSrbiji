/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forme;

import domen.Igrac;
import domen.Klub;
import domen.Rezultat;
import domen.Statistika;
import domen.Utakmica;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import konstante.Operacije;
import modeli.ModelTabeleRezultati;
import modeli.ModelTabeleStatistikaUtakmice;
import transfer.KlijentskiZahtev;
import transfer.ServerskiOdgovor;

/**
 *
 * @author Windows HD
 */
public class formaStatistike extends javax.swing.JPanel {

    /**
     * Creates new form formaStatistike
     */
    ModelTabeleStatistikaUtakmice m = new ModelTabeleStatistikaUtakmice();
    int brojGolova = 0;
    int brojZutih = 0;

    public formaStatistike() {
        initComponents();
        srediRezultate();
        srediTabelu();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaUtakmice = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        btnPotvrdi = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabelaStatistike = new javax.swing.JTable();
        btnSacuvaj = new javax.swing.JButton();

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jLabel1.setText("Izaberite Utakmicu:");

        tabelaUtakmice.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabelaUtakmice);

        jLabel2.setText("Unesite Statistiku:");

        btnPotvrdi.setText("Potvrdi");
        btnPotvrdi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPotvrdiActionPerformed(evt);
            }
        });

        tabelaStatistike.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tabelaStatistike);

        btnSacuvaj.setText("Sačuvaj");
        btnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSacuvaj)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnPotvrdi)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2)))
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnPotvrdi)
                .addGap(7, 7, 7)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSacuvaj)
                .addContainerGap(12, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnPotvrdiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPotvrdiActionPerformed
        KlijentskiZahtev kz5 = new KlijentskiZahtev();
        kz5.setOperacija(Operacije.VRATI_STATISTIKE);
        komunikacija.KomunikacijaSaServerom.getInstanca().posaljiZahtev(kz5);

        ServerskiOdgovor so5 = komunikacija.KomunikacijaSaServerom.getInstanca().primiOdgovor();
        ArrayList<Statistika> vraceneStat = (ArrayList<Statistika>) so5.getOdgovor();

        if (vraceneStat.size() != 0) {
            ModelTabeleRezultati model = (ModelTabeleRezultati) tabelaUtakmice.getModel();
            int red = tabelaUtakmice.getSelectedRow();
            Rezultat rez = model.vratiRezultat(red);
            int idUtakmice = 0;
            int brojac = 0;

            KlijentskiZahtev kz6 = new KlijentskiZahtev();
            kz6.setOperacija(Operacije.VRATI_UTAKMICE);
            komunikacija.KomunikacijaSaServerom.getInstanca().posaljiZahtev(kz6);

            ServerskiOdgovor so6 = komunikacija.KomunikacijaSaServerom.getInstanca().primiOdgovor();
            ArrayList<Utakmica> vraceneUtak = (ArrayList<Utakmica>) so6.getOdgovor();

            for (Utakmica vraceneUtak1 : vraceneUtak) {
                if (vraceneUtak1.getGost().equals(rez.getGost())
                        && vraceneUtak1.getDomacin().equals(rez.getDomacin())
                        && vraceneUtak1.getTakmicenje().getNaziv().equals(rez.getTakmicenje().getNaziv())) {
                    idUtakmice = vraceneUtak1.getUtakmicaID();
                }
            }

            for (Statistika s : vraceneStat) {
                if (s.getUtakmica().getUtakmicaID() == idUtakmice) {
                    brojac++;
                }
            }

            if (brojac > 0) {
                JOptionPane.showMessageDialog(this, "Već postoji statistika za igrače na ovoj utakmici", "", JOptionPane.ERROR_MESSAGE);
                m.obrisiListu();
                return;
            } else {
                m.obrisiListu();
                Statistika s = new Statistika();

                if (red >= 0) {

                    String klub1 = rez.getDomacin();
                    String klub2 = rez.getGost();

                    ArrayList<Igrac> lista = new ArrayList<>();
                    ArrayList<Statistika> listaS = new ArrayList<>();

                    KlijentskiZahtev kz = new KlijentskiZahtev();
                    kz.setOperacija(Operacije.VRATI_IGRACE);
                    komunikacija.KomunikacijaSaServerom.getInstanca().posaljiZahtev(kz);

                    ServerskiOdgovor so = komunikacija.KomunikacijaSaServerom.getInstanca().primiOdgovor();
                    ArrayList<Igrac> vraceni = (ArrayList<Igrac>) so.getOdgovor();

                    KlijentskiZahtev kz1 = new KlijentskiZahtev();
                    kz1.setOperacija(Operacije.VRATI_KLUBOVE);
                    komunikacija.KomunikacijaSaServerom.getInstanca().posaljiZahtev(kz1);

                    ServerskiOdgovor so1 = komunikacija.KomunikacijaSaServerom.getInstanca().primiOdgovor();
                    ArrayList<Klub> vraceniKlubovi = (ArrayList<Klub>) so1.getOdgovor();

                    for (Igrac i : vraceni) {
                        String klub = "";
                        for (Klub kl : vraceniKlubovi) {
                            if (kl.getKlubID() == i.getKlub().getKlubID()) {
                                klub = kl.getNaziv();
                            }
                        }
                        i.getKlub().setNaziv(klub);
                        if (klub.equals(klub1) || klub.equals(klub2)) {
                            lista.add(i);
                        }
                    }

                    KlijentskiZahtev kz4 = new KlijentskiZahtev();
                    kz4.setOperacija(Operacije.VRATI_UTAKMICE);
                    komunikacija.KomunikacijaSaServerom.getInstanca().posaljiZahtev(kz4);

                    ServerskiOdgovor so4 = komunikacija.KomunikacijaSaServerom.getInstanca().primiOdgovor();
                    ArrayList<Utakmica> vraceneUtakmice = (ArrayList<Utakmica>) so4.getOdgovor();

                    for (Utakmica uta : vraceneUtakmice) {
                        if (uta.getTakmicenje().getNaziv().equals(rez.getTakmicenje().getNaziv())
                                && uta.getDomacin().equals(rez.getDomacin()) && uta.getGost().equals(rez.getGost())) {
                            int id = uta.getUtakmicaID();
                            Utakmica utakm = new Utakmica();
                            utakm.setUtakmicaID(id);
                            s.setUtakmica(utakm);
                        }
                    }
                    int id1 = s.getUtakmica().getUtakmicaID();

                    for (Igrac ig : lista) {
                        s = new Statistika();
                        Utakmica utakmi = new Utakmica();
                        utakmi.setUtakmicaID(id1);
                        s.setUtakmica(utakmi);
                        s.setIgrac(ig);
                        listaS.add(s);
                        m.dodajUListu(s);
                    }

                    m.osvezi();
                } else {
                    JOptionPane.showMessageDialog(this, "Morate izabrati utakmicu", "", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
        } else if (vraceneStat.size() == 0) {
            ModelTabeleRezultati model = (ModelTabeleRezultati) tabelaUtakmice.getModel();
            m.obrisiListu();
            int red = tabelaUtakmice.getSelectedRow();
            Statistika s = new Statistika();

            if (red >= 0) {

                Rezultat rez = model.vratiRezultat(red);
                String klub1 = rez.getDomacin();
                String klub2 = rez.getGost();

                ArrayList<Igrac> lista = new ArrayList<>();
                ArrayList<Statistika> listaS = new ArrayList<>();

                KlijentskiZahtev kz = new KlijentskiZahtev();
                kz.setOperacija(Operacije.VRATI_IGRACE);
                komunikacija.KomunikacijaSaServerom.getInstanca().posaljiZahtev(kz);

                ServerskiOdgovor so = komunikacija.KomunikacijaSaServerom.getInstanca().primiOdgovor();
                ArrayList<Igrac> vraceni = (ArrayList<Igrac>) so.getOdgovor();

                KlijentskiZahtev kz1 = new KlijentskiZahtev();
                kz1.setOperacija(Operacije.VRATI_KLUBOVE);
                komunikacija.KomunikacijaSaServerom.getInstanca().posaljiZahtev(kz1);

                ServerskiOdgovor so1 = komunikacija.KomunikacijaSaServerom.getInstanca().primiOdgovor();
                ArrayList<Klub> vraceniKlubovi = (ArrayList<Klub>) so1.getOdgovor();

                for (Igrac i : vraceni) {
                    String klub = "";
                    for (Klub kl : vraceniKlubovi) {
                        if (kl.getKlubID() == i.getKlub().getKlubID()) {
                            klub = kl.getNaziv();
                        }
                    }
                    i.getKlub().setNaziv(klub);
                    if (klub.equals(klub1) || klub.equals(klub2)) {
                        lista.add(i);
                    }
                }

                KlijentskiZahtev kz4 = new KlijentskiZahtev();
                kz4.setOperacija(Operacije.VRATI_UTAKMICE);
                komunikacija.KomunikacijaSaServerom.getInstanca().posaljiZahtev(kz4);

                ServerskiOdgovor so4 = komunikacija.KomunikacijaSaServerom.getInstanca().primiOdgovor();
                ArrayList<Utakmica> vraceneUtakmice = (ArrayList<Utakmica>) so4.getOdgovor();

                for (Utakmica uta : vraceneUtakmice) {
                    if (uta.getTakmicenje().getNaziv().equals(rez.getTakmicenje().getNaziv())
                            && uta.getDomacin().equals(rez.getDomacin()) && uta.getGost().equals(rez.getGost())) {
                        int id = uta.getUtakmicaID();
                        Utakmica utakm = new Utakmica();
                        utakm.setUtakmicaID(id);
                        s.setUtakmica(utakm);
                    }
                }
                int id1 = s.getUtakmica().getUtakmicaID();

                for (Igrac ig : lista) {
                    s = new Statistika();
                    Utakmica utakmi = new Utakmica();
                    utakmi.setUtakmicaID(id1);
                    s.setUtakmica(utakmi);
                    s.setIgrac(ig);
                    listaS.add(s);
                    m.dodajUListu(s);
                }

                m.osvezi();
            } else {
                JOptionPane.showMessageDialog(this, "Morate izabrati utakmicu", "", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

    }//GEN-LAST:event_btnPotvrdiActionPerformed

    private void btnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajActionPerformed
        ModelTabeleStatistikaUtakmice model = (ModelTabeleStatistikaUtakmice) tabelaStatistike.getModel();
        ModelTabeleRezultati mod = (ModelTabeleRezultati) tabelaUtakmice.getModel();
        int red = tabelaStatistike.getSelectedRow();
        int red1 = tabelaUtakmice.getSelectedRow();
        ArrayList<Statistika> statistike = model.getLista();
        KlijentskiZahtev kz = new KlijentskiZahtev();
        ServerskiOdgovor so = new ServerskiOdgovor();

        Rezultat rez = mod.vratiRezultat(red1);

        int golovi = rez.getGoloviDomacin() + rez.getGoloviGost();

        int brojac = 0;
        int brojacZutih = 0;

        for (Statistika s : statistike) {
            brojGolova += s.getBrGolova();
            brojZutih = s.getBrZutihKartona();
            
            if(brojZutih > 2) {
                brojacZutih++;
            }
            
            if (s.getPretrcaniKilometri() < 0) {
                brojac++;
            }

        }

        if (brojGolova > golovi) {
            JOptionPane.showMessageDialog(this, "Broj golova ne sme biti veći od ukupnog broja golova na utakmici", "", JOptionPane.ERROR_MESSAGE);
            brojGolova = 0;
            return;
        }
        
        if(brojacZutih > 0) {
            JOptionPane.showMessageDialog(this, "Igrač ne može da dobije više od 2 žuta kartona na jednoj utakmici", "", JOptionPane.ERROR_MESSAGE);
            brojZutih = 0;
            return;
        }

        if (brojac > 0) {
            JOptionPane.showMessageDialog(this, "Broj pretrcanih kilometara ne sme da bude manji od 0", "", JOptionPane.ERROR_MESSAGE);
            brojGolova = 0;
            return;
        }

        for (Statistika st : statistike) {
            kz = new KlijentskiZahtev();
            kz.setOperacija(Operacije.SACUVAJ_STATISTIKU);
            kz.setParametar(st);
            komunikacija.KomunikacijaSaServerom.getInstanca().posaljiZahtev(kz);

            so = komunikacija.KomunikacijaSaServerom.getInstanca().primiOdgovor();

        }

        JOptionPane.showMessageDialog(this, so.getTekst());
        model.obrisiListu();

    }//GEN-LAST:event_btnSacuvajActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPotvrdi;
    private javax.swing.JButton btnSacuvaj;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable tabelaStatistike;
    private javax.swing.JTable tabelaUtakmice;
    // End of variables declaration//GEN-END:variables

    private void srediRezultate() {
        KlijentskiZahtev kz = new KlijentskiZahtev();
        kz.setOperacija(Operacije.VRATI_REZULTATE);
        komunikacija.KomunikacijaSaServerom.getInstanca().posaljiZahtev(kz);

        ServerskiOdgovor so = komunikacija.KomunikacijaSaServerom.getInstanca().primiOdgovor();
        ArrayList<Rezultat> vraceniRezultati = (ArrayList<Rezultat>) so.getOdgovor();

        ModelTabeleRezultati model = new ModelTabeleRezultati();

        for (Rezultat rez : vraceniRezultati) {
            model.dodajUListu(rez);
        }

        tabelaUtakmice.setModel(model);
    }

    private void srediTabelu() {
        tabelaStatistike.setModel(m);
    }
}
